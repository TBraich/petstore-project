openapi: 3.0.0
info:
  title: Pet Store User Service
  version: 1.0.0
  description: This service handles user management and authentication within the Pet Store system.
servers:
  - url: http://petstore.example.com/api
    description: Production server
paths:
  /user/register:
    post:
      summary: Register a new user
      operationId: registerUser
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user data provided

  /user/{userId}:
    get:
      summary: Get user by ID
      operationId: getUserById
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      summary: Update user by ID
      operationId: updateUser
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User successfully updated
        '404':
          description: User not found
    delete:
      summary: Delete user by ID
      operationId: deleteUser
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User successfully deleted
        '404':
          description: User not found

  /users/list:
    get:
      summary: Get list of all users
      operationId: listUsers
      tags:
        - User
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/register:
    post:
      summary: Register a list of users
      operationId: registerUsersBulk
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Users successfully registered
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /auth/login:
    post:
      summary: User login
      operationId: loginUser
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          headers:
            Set-Cookie:
              schema:
                type: string
                description: Session cookie
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /auth/authorize:
    get:
      summary: Authorize user based on token
      operationId: authorizeUser
      tags:
        - Authentication
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User authorized
        '401':
          description: Unauthorized

components:
  schemas:
    User:
      type: object
      required:
        - username
        - email
      properties:
        userId:
          type: string
          description: Unique identifier for the user
        username:
          type: string
          description: User's username
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        email:
          type: string
          description: User's email